init module {
	knowledge {
		possiblemove(left).
		possiblemove(right).
		possiblemove(back).
		possiblemove(forward).

		% we can't see backwards. We assume it's free. May cause occasional bumps.
		square(back,empty).
		
		% contents of squares that we can't go to.
		obstruction(vac). % a bot is there
		obstruction(obstacle).
	}
	
	actionspec{
		% The action goto(Level, Dir) moves the elevator car to floor Level. It can
		% only be performed if the elevator car is docked and not moving, i.e.,
		% atFloor(Here) holds for some Here.
		% When the elevator arrives at the requested floor, the Dir light will turn on.
		move( Dir) {
		   pre{ square(Dir,Obj), not(obstruction(Obj)) }
		   post{ true }
		}
		clean {
			pre { true }
			post {true }
		}
	}	
}

main module {
	program [order=linear] {
		% we see dust?
		if bel(square(here,dust)) then clean.
		if bel(square(left,dust)) then move(left).
		if bel(square(right,dust)) then move(right).
		% for the cases forwardLeft, forwardRight and forward we try go forward.
		% this may fail if dust is eg forwardLeft and obstacle forward.
		if bel(square(X,dust)) then move(forward). 

		% no solution. Keep moving at random 
		if bel(possiblemove(X)) then move(X).
	}
}


event module {
	program {
		% fetch latest percepts
		forall bel(square(Name,Contents)) do delete(square(Name,Contents)).
		forall bel(percept(square(Name, Contents))) do insert(square(Name,Contents)).
	}
}

