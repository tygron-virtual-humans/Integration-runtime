in model-checker.maude
in querylanguage2.maude
in additionals.maude
in goal-sem.maude
mod BLOCK-GOAL is
	protecting SYNTACTICAL-DEFS .
	protecting GOAL-PREDS .
	sort Block .
	subsorts GroundTerm < Block .
	vars X Y Z : Block .
	vars BB GB U : BeliefBase .
	vars S : Substitution .
	var LS : ListSubstitution .
	op on : Block Block -> Belief .
	op clear : Block -> Belief .
	op block : Block -> Belief .
	crl [on] : solve1(on(X, Y), U) => sol(top, none) if matches(on(X, Y), U) == none .
	crl [on] : solve1(on(X, Z), U) => sol(top, S) if (S & LS) := allMatches(on(X,Z), U, U) /\ S =/= none .
	crl [clear] : solve1(clear(X), U) => sol(top, none) if matches(clear(X), U) == none .
	crl [clear] : solve1(clear(X), U) => sol(top, S) if (S & LS) := allMatches(clear(X), U, U) /\ S =/= none .
	crl [block] : solve1(block(X), U) => sol(top, none) if matches(block(X), U) == none .
	crl [block] : solve1(block(X), U) => sol(top, S) if (S & LS) := allMatches(block(X), U, U) /\ S =/= none .
	op move : Block Block -> B-Action .
	eq [b-act] : move(X, Z) = [block(Z) , neg on(X,Z) ;; on(X,table) ;; clear(Z)] .
	op moveConditional : Block Block -> C-Action .
	eq [c-act] : moveConditional(X, Z) = {goal(on(ac,table)) /\ bel(on(X,Z)) /\ bel(clear(X))} do(move(X,Z)) .
	op lb2 : -> GMentalState .
	eq [by2] : lb2 = << bLabel(empty), bb, gb  >> .
	ops property : -> Prop .
	ceq << L:Label, BB, GB >> |= property = true if matches(on(ab,table), BB) == none .
	ops aa ab ac ad ae af ag ah ai aj ak al am an ao ap aq ar as at au av aw ax ay az ba bc bd be bf bg bh bi bj bk bl bm bn bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci cj ck cl cm cn co cp cq cr cs ct cu cv cw cx cy cz da db dc dd de df dg dh di dj dk dl dm dn do dp dq dr ds dt du dv dw dx dy dz ea eb ec ed ee ef eg eh ei ej ek el em en eo ep eq er es et eu ev ew ex ey ez fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo fp fq fr fs ft fu fv fw fx fy fz ga gc gd ge gf gg gh gi gj gk gl gm gn go gp gq gr gs gt gu gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht table : -> Block . 
	eq bb = on(aa,table) ; block(aa) ; on(ab,aa) ; block(ab) ; on(ac,ab) ; block(ac) ; on(ad,ac) ; block(ad) ; clear(ad) ; on(ae,table) ; block(ae) ; clear(ae) ; on(af,table) ; block(af) ; clear(af) ; on(ag,table) ; block(ag) ; clear(ag) ; on(ah,table) ; block(ah) ; clear(ah) ; on(ai,table) ; block(ai) ; clear(ai) ; on(aj,table) ; block(aj) ; clear(aj) ; on(ak,table) ; block(ak) ; clear(ak) ; on(al,table) ; block(al) ; clear(al) ; on(am,table) ; block(am) ; clear(am) ; on(an,table) ; block(an) ; clear(an) ; on(ao,table) ; block(ao) ; clear(ao) ; on(ap,table) ; block(ap) ; clear(ap) ; on(aq,table) ; block(aq) ; clear(aq) ; on(ar,table) ; block(ar) ; clear(ar) ; on(as,table) ; block(as) ; clear(as) ; on(at,table) ; block(at) ; clear(at) ; on(au,table) ; block(au) ; clear(au) ; on(av,table) ; block(av) ; clear(av) ; on(aw,table) ; block(aw) ; clear(aw) ; on(ax,table) ; block(ax) ; clear(ax) ; on(ay,table) ; block(ay) ; clear(ay) ; on(az,table) ; block(az) ; clear(az) ; on(ba,table) ; block(ba) ; clear(ba) ; on(bc,table) ; block(bc) ; clear(bc) ; on(bd,table) ; block(bd) ; clear(bd) ; on(be,table) ; block(be) ; clear(be) ; on(bf,table) ; block(bf) ; clear(bf) ; on(bg,table) ; block(bg) ; clear(bg) ; on(bh,table) ; block(bh) ; clear(bh) ; on(bi,table) ; block(bi) ; clear(bi) ; on(bj,table) ; block(bj) ; clear(bj) ; on(bk,table) ; block(bk) ; clear(bk) ; on(bl,table) ; block(bl) ; clear(bl) ; on(bm,table) ; block(bm) ; clear(bm) ; on(bn,table) ; block(bn) ; clear(bn) ; on(bo,table) ; block(bo) ; clear(bo) ; on(bp,table) ; block(bp) ; clear(bp) ; on(bq,table) ; block(bq) ; clear(bq) ; on(br,table) ; block(br) ; clear(br) ; on(bs,table) ; block(bs) ; clear(bs) ; on(bt,table) ; block(bt) ; clear(bt) ; on(bu,table) ; block(bu) ; clear(bu) ; on(bv,table) ; block(bv) ; clear(bv) ; on(bw,table) ; block(bw) ; clear(bw) ; on(bx,table) ; block(bx) ; clear(bx) ; on(by,table) ; block(by) ; clear(by) ; on(bz,table) ; block(bz) ; clear(bz) ; on(ca,table) ; block(ca) ; clear(ca) ; on(cb,table) ; block(cb) ; clear(cb) ; on(cc,table) ; block(cc) ; clear(cc) ; on(cd,table) ; block(cd) ; clear(cd) ; on(ce,table) ; block(ce) ; clear(ce) ; on(cf,table) ; block(cf) ; clear(cf) ; on(cg,table) ; block(cg) ; clear(cg) ; on(ch,table) ; block(ch) ; clear(ch) ; on(ci,table) ; block(ci) ; clear(ci) ; on(cj,table) ; block(cj) ; clear(cj) ; on(ck,table) ; block(ck) ; clear(ck) ; on(cl,table) ; block(cl) ; clear(cl) ; on(cm,table) ; block(cm) ; clear(cm) ; on(cn,table) ; block(cn) ; clear(cn) ; on(co,table) ; block(co) ; clear(co) ; on(cp,table) ; block(cp) ; clear(cp) ; on(cq,table) ; block(cq) ; clear(cq) ; on(cr,table) ; block(cr) ; clear(cr) ; on(cs,table) ; block(cs) ; clear(cs) ; on(ct,table) ; block(ct) ; clear(ct) ; on(cu,table) ; block(cu) ; clear(cu) ; on(cv,table) ; block(cv) ; clear(cv) ; on(cw,table) ; block(cw) ; clear(cw) ; on(cx,table) ; block(cx) ; clear(cx) ; on(cy,table) ; block(cy) ; clear(cy) ; on(cz,table) ; block(cz) ; clear(cz) ; on(da,table) ; block(da) ; clear(da) ; on(db,table) ; block(db) ; clear(db) ; on(dc,table) ; block(dc) ; clear(dc) ; on(dd,table) ; block(dd) ; clear(dd) ; on(de,table) ; block(de) ; clear(de) ; on(df,table) ; block(df) ; clear(df) ; on(dg,table) ; block(dg) ; clear(dg) ; on(dh,table) ; block(dh) ; clear(dh) ; on(di,table) ; block(di) ; clear(di) ; on(dj,table) ; block(dj) ; clear(dj) ; on(dk,table) ; block(dk) ; clear(dk) ; on(dl,table) ; block(dl) ; clear(dl) ; on(dm,table) ; block(dm) ; clear(dm) ; on(dn,table) ; block(dn) ; clear(dn) ; on(do,table) ; block(do) ; clear(do) ; on(dp,table) ; block(dp) ; clear(dp) ; on(dq,table) ; block(dq) ; clear(dq) ; on(dr,table) ; block(dr) ; clear(dr) ; on(ds,table) ; block(ds) ; clear(ds) ; on(dt,table) ; block(dt) ; clear(dt) ; on(du,table) ; block(du) ; clear(du) ; on(dv,table) ; block(dv) ; clear(dv) ; on(dw,table) ; block(dw) ; clear(dw) ; on(dx,table) ; block(dx) ; clear(dx) ; on(dy,table) ; block(dy) ; clear(dy) ; on(dz,table) ; block(dz) ; clear(dz) ; on(ea,table) ; block(ea) ; clear(ea) ; on(eb,table) ; block(eb) ; clear(eb) ; on(ec,table) ; block(ec) ; clear(ec) ; on(ed,table) ; block(ed) ; clear(ed) ; on(ee,table) ; block(ee) ; clear(ee) ; on(ef,table) ; block(ef) ; clear(ef) ; on(eg,table) ; block(eg) ; clear(eg) ; on(eh,table) ; block(eh) ; clear(eh) ; on(ei,table) ; block(ei) ; clear(ei) ; on(ej,table) ; block(ej) ; clear(ej) ; on(ek,table) ; block(ek) ; clear(ek) ; on(el,table) ; block(el) ; clear(el) ; on(em,table) ; block(em) ; clear(em) ; on(en,table) ; block(en) ; clear(en) ; on(eo,table) ; block(eo) ; clear(eo) ; on(ep,table) ; block(ep) ; clear(ep) ; on(eq,table) ; block(eq) ; clear(eq) ; on(er,table) ; block(er) ; clear(er) ; on(es,table) ; block(es) ; clear(es) ; on(et,table) ; block(et) ; clear(et) ; on(eu,table) ; block(eu) ; clear(eu) ; on(ev,table) ; block(ev) ; clear(ev) ; on(ew,table) ; block(ew) ; clear(ew) ; on(ex,table) ; block(ex) ; clear(ex) ; on(ey,table) ; block(ey) ; clear(ey) ; on(ez,table) ; block(ez) ; clear(ez) ; on(fa,table) ; block(fa) ; clear(fa) ; on(fb,table) ; block(fb) ; clear(fb) ; on(fc,table) ; block(fc) ; clear(fc) ; on(fd,table) ; block(fd) ; clear(fd) ; on(fe,table) ; block(fe) ; clear(fe) ; on(ff,table) ; block(ff) ; clear(ff) ; on(fg,table) ; block(fg) ; clear(fg) ; on(fh,table) ; block(fh) ; clear(fh) ; on(fi,table) ; block(fi) ; clear(fi) ; on(fj,table) ; block(fj) ; clear(fj) ; on(fk,table) ; block(fk) ; clear(fk) ; on(fl,table) ; block(fl) ; clear(fl) ; on(fm,table) ; block(fm) ; clear(fm) ; on(fn,table) ; block(fn) ; clear(fn) ; on(fo,table) ; block(fo) ; clear(fo) ; on(fp,table) ; block(fp) ; clear(fp) ; on(fq,table) ; block(fq) ; clear(fq) ; on(fr,table) ; block(fr) ; clear(fr) ; on(fs,table) ; block(fs) ; clear(fs) ; on(ft,table) ; block(ft) ; clear(ft) ; on(fu,table) ; block(fu) ; clear(fu) ; on(fv,table) ; block(fv) ; clear(fv) ; on(fw,table) ; block(fw) ; clear(fw) ; on(fx,table) ; block(fx) ; clear(fx) ; on(fy,table) ; block(fy) ; clear(fy) ; on(fz,table) ; block(fz) ; clear(fz) ; on(ga,table) ; block(ga) ; clear(ga) ; on(gc,table) ; block(gc) ; clear(gc) ; on(gd,table) ; block(gd) ; clear(gd) ; on(ge,table) ; block(ge) ; clear(ge) ; on(gf,table) ; block(gf) ; clear(gf) ; on(gg,table) ; block(gg) ; clear(gg) ; on(gh,table) ; block(gh) ; clear(gh) ; on(gi,table) ; block(gi) ; clear(gi) ; on(gj,table) ; block(gj) ; clear(gj) ; on(gk,table) ; block(gk) ; clear(gk) ; on(gl,table) ; block(gl) ; clear(gl) ; on(gm,table) ; block(gm) ; clear(gm) ; on(gn,table) ; block(gn) ; clear(gn) ; on(go,table) ; block(go) ; clear(go) ; on(gp,table) ; block(gp) ; clear(gp) ; on(gq,table) ; block(gq) ; clear(gq) ; on(gr,table) ; block(gr) ; clear(gr) ; on(gs,table) ; block(gs) ; clear(gs) ; on(gt,table) ; block(gt) ; clear(gt) ; on(gu,table) ; block(gu) ; clear(gu) ; on(gv,table) ; block(gv) ; clear(gv) ; on(gw,table) ; block(gw) ; clear(gw) ; on(gx,table) ; block(gx) ; clear(gx) ; on(gy,table) ; block(gy) ; clear(gy) ; on(gz,table) ; block(gz) ; clear(gz) ; on(ha,table) ; block(ha) ; clear(ha) ; on(hb,table) ; block(hb) ; clear(hb) ; on(hc,table) ; block(hc) ; clear(hc) ; on(hd,table) ; block(hd) ; clear(hd) ; on(he,table) ; block(he) ; clear(he) ; on(hf,table) ; block(hf) ; clear(hf) ; on(hg,table) ; block(hg) ; clear(hg) ; on(hh,table) ; block(hh) ; clear(hh) ; on(hi,table) ; block(hi) ; clear(hi) ; on(hj,table) ; block(hj) ; clear(hj) ; on(hk,table) ; block(hk) ; clear(hk) ; on(hl,table) ; block(hl) ; clear(hl) ; on(hm,table) ; block(hm) ; clear(hm) ; on(hn,table) ; block(hn) ; clear(hn) ; on(ho,table) ; block(ho) ; clear(ho) ; on(hp,table) ; block(hp) ; clear(hp) ; on(hq,table) ; block(hq) ; clear(hq) ; on(hr,table) ; block(hr) ; clear(hr) ; on(hs,table) ; block(hs) ; clear(hs) ; on(ht,table) ; block(ht) ; clear(ht)  .
	op gb : -> GoalBase .
	op g1 : -> BeliefBase .
	eq g1 = on(ac,table) .
	eq gb = g1 .
endm
*** set profile off . set profile on . rew lb2 . show profile . set profile off .
set verbose on .
*** red modelCheck(lb2, <> property) .
rew lb2 .
