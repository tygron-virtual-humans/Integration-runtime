/**
 * GOAL interpreter that facilitates developing and executing GOAL multi-agent
 * programs. Copyright (C) 2011 K.V. Hindriks, W. Pasman
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package goal.core.program.validation.agentfile;

import goal.core.program.ActionSpecification;
import goal.core.program.Module;
import goal.core.program.NameSpace;
import goal.core.program.literals.Macro;
import goal.core.program.rules.Rule;
import goal.core.program.rules.RuleSet;
import goal.core.program.validation.Validator;
import goal.core.program.validation.ValidatorError;

import java.util.List;

/**
 * {@link Validator} for {@link RuleSet}s.<br>
 *
 * Errors and warnings are generated by the {@link RuleValidator} used to
 * validate individual {@link Rule}s.
 *
 * Does not validate any modules that may be used by any of the rules;
 * {@link ModuleValidator} should handle that.<br>
 *
 * @author N.Kraayenbrink
 * @modified K.Hindriks
 *
 */
public class NameSpaceValidator extends Validator<NameSpace> {

	/**
	 * Validator for {@link NameSpace}s.
	 */
	public NameSpaceValidator() {
	}

	/**
	 * Validates a name space.
	 *
	 * @param subject
	 *            The {@link NameSpace} to be validated.
	 */
	@Override
	protected void doValidate(NameSpace subject) {
		// Check whether macro names have been duplicated, i.e. used more than
		// once to define a macro
		// in the subject's name space.
		for (List<Macro> macros : subject.getMacros().getItems().values()) {
			if (macros.size() > 1) {
				for (int i = 1; i < macros.size(); i++) {
					this.report(new ValidatorError(
							GOALError.MACRO_DUPLICATE_NAME, macros.get(i),
							macros.get(i).getSignature()));
				}
			}
		}

		// Check whether module names have been duplicated, i.e. used more than
		// once to define a module
		// in the subject's name space.
		for (List<Module> modules : subject.getModules().getItems().values()) {
			if (modules.size() > 1) {
				for (int i = 1; i < modules.size(); i++) {
					this.report(new ValidatorError(
							GOALError.MODULE_DUPLICATE_NAME, modules.get(i),
							modules.get(i).getSignature()));
				}
			}
		}

		// Check for name clashes between actions and modules in the name space.
		// There is a naming conflict if there are an action and a module with
		// the same name and same number of parameters.
		// In that case we cannot resolve whether a name in a rule refers to the
		// action or to the module.
		for (String key : subject.getActionSpecifications().getItems().keySet()) {
			if (subject.getModules().getItems().containsKey(key)) {
				List<Module> moduleList = subject.getModules().getItems()
						.get(key);
				for (ActionSpecification actionSpec : subject
						.getActionSpecifications().getItems().get(key)) {
					for (int i = 0; i < moduleList.size(); i++) {
						this.report(new ValidatorError(
								GOALError.ACTION_DUPLICATE_NAME, actionSpec,
								actionSpec.getSignature(), moduleList.get(i)
								.getSignature()));
					}
				}
			}
		}
	}

}
